7.1.1 Lexical structure

This section describes how individual tokens (identifiers, numbers, etc.) are formed from sequences of characters. The following sections describe how expressions and programs are formed from sequences of tokens.

Intertoken-space may occur on either side of any token, but not within a token.

Tokens which require implicit termination (identifiers, numbers, characters, and dot) may be terminated by any delimiter, but not necessarily by anything else.

The following five characters are reserved for future extensions to the language: [ ] { } |;

7.1.2 External representations

Datum is what the read procedure (section see section 6.6.2 Input) successfully parses. Note that any string that parses as an expression will also parse as a datum.;


7.1.3 Expressions;




7.1.4 Quasiquotations

The following grammar for quasiquote expressions is not context-free. It is presented as a recipe for generating an infinite number of production rules. Imagine a copy of the following rules for D = 1, 2,3, .... D keeps track of the nesting depth.;

quasiquotation : quasiquotation-1
qq-template-0 : expression;

quasiquotation-D : `qq-template-D
       | "(quasiquote" qq-template-D);

qq-template-D : simple-datum
       | list-qq-template-D
       | vector-qq-template-D
       | unquotation-D;

list-qq-template-D : (qq-template-or-splice-D*)
       | (qq-template-or-splice-D+ . qq-template-D)
       | 'qq-template-D
       | quasiquotation-D+1;

vector-qq-template-D : #(qq-template-or-splice-D*);

unquotation-D : ,qq-template-D-1
       | "(unquote" qq-template-D-1);

qq-template-or-splice-D : qq-template-D
       | splicing-unquotation-D;

splicing-unquotation-D : ,@qq-template-D-1
       | "(unquote-splicing" qq-template-D-1) 

In quasiquotations, a list-qq-template-D can sometimes be confused with either an unquotation-D or a splicing-unquotation-D. The interpretation as an unquotation or splicing-unquotation-D takes precedence.

7.1.5 Transformers;


transformer-spec :
    (syntax-rules (identifier*) syntax-rule*);

syntax-rule : (pattern template);

pattern : pattern-identifier
     | (pattern*)
     | (pattern+ . pattern)
     | (pattern* pattern ellipsis)
     | #(pattern*)
     | #(pattern* pattern ellipsis)
     | pattern-datum;

pattern-datum : string
     | character
     | boolean
     | number;

template : pattern-identifier
     | (template-element*)
     | (template-element+ . template)
     | #(template-element*)
     | template-datum;

template-element : template
     | template ellipsis;

template-datum : pattern-datum;

pattern-identifier : any-identifier-except-`...';

ellipsis : the-identifier-`...'

7.1.6 Programs and definitions;
