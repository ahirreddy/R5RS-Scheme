\begin{grammar}%
\meta{token} \: \meta{identifier} \| \meta{boolean} \| \meta{number}\index{identifier}
\>  \| \meta{character} \| \meta{string}
\>  \| ( \| ) \| \sharpsign( \| \singlequote{} \| \backquote{} \| , \| ,@ \| {\bf.}
\meta{delimiter} \: \meta{whitespace} \| ( \| ) \| " \| ;
\meta{whitespace} \: \meta{space or newline}
\meta{comment} \: ; \= $\langle$\rm all subsequent characters up to a
		    \>\ \rm line break$\rangle$\index{comment}
\meta{atmosphere} \: \meta{whitespace} \| \meta{comment}
\meta{intertoken space} \: \arbno{\meta{atmosphere}}%
\end{grammar}

\begin{grammar}%
\meta{identifier} \: \meta{initial} \arbno{\meta{subsequent}}
 \>  \| \meta{peculiar identifier}
\meta{initial} \: \meta{letter} \| \meta{special initial}
\meta{letter} \: a \| b \| c \| ... \| z

\meta{special initial} \: ! \| \$ \| \% \| \verb"&" \| * \| / \| : \| < \| =
 \>  \| > \| ? \| \verb"^" \| \verb"_" \| \verb"~"
\meta{subsequent} \: \meta{initial} \| \meta{digit}
 \>  \| \meta{special subsequent}
\meta{digit} \: 0 \| 1 \| 2 \| 3 \| 4 \| 5 \| 6 \| 7 \| 8 \| 9
\meta{special subsequent} \: + \| - \| .\ \| @
\meta{peculiar identifier} \: + \| - \| ...
%\| 1+ \| -1+
\meta{syntactic keyword} \: \meta{expression keyword}\index{keyword}\index{syntactic keyword}
 \>  \| else \| => \| define 
 \>  \| unquote \| unquote-splicing
\meta{expression keyword} \: quote \| lambda \| if
 \>  \| set! \| begin \| cond \| and \| or \| case
 \>  \| let \| let* \| letrec \| do \| delay
 \>  \| quasiquote

\copy0\rm any \meta{identifier} that isn't\index{variable}
\hbox to 1\wd0{\hfill}\ \rm also a \meta{syntactic keyword}$\rangle$

\meta{boolean} \: \schtrue{} \| \schfalse{}
\meta{character} \: \#\backwhack{} \meta{any character}
 \>  \| \#\backwhack{} \meta{character name}
\meta{character name} \: space \| newline
\todo{Explain what happens in the ambiguous case.}
\meta{string} \: " \arbno{\meta{string element}} "
\meta{string element} \: \meta{any character other than \doublequote{} or \backwhack}
 \>  \| \backwhack\doublequote{} \| \backwhack\backwhack %
\end{grammar}

\begin{grammar}%
\meta{number} \: \meta{num $2$}%
       \| \meta{num $8$}
   \>  \| \meta{num $10$}%
       \| \meta{num $16$}
\end{grammar}

\begin{grammar}%
\meta{num $R$} \: \meta{prefix $R$} \meta{complex $R$}
\meta{complex $R$} \: %
         \meta{real $R$} %
      \| \meta{real $R$} @ \meta{real $R$}
   \> \| \meta{real $R$} + \meta{ureal $R$} i %
      \| \meta{real $R$} - \meta{ureal $R$} i
   \> \| \meta{real $R$} + i %
      \| \meta{real $R$} - i
   \> \| + \meta{ureal $R$} i %
      \| - \meta{ureal $R$} i %
      \| + i %
      \| - i
\meta{real $R$} \: \meta{sign} \meta{ureal $R$}
\meta{ureal $R$} \: %
         \meta{uinteger $R$}
   \> \| \meta{uinteger $R$} / \meta{uinteger $R$}
   \> \| \meta{decimal $R$}
\meta{decimal $10$} \: %
         \meta{uinteger $10$} \meta{suffix}
   \> \| . \atleastone{\meta{digit $10$}} \arbno{\#} \meta{suffix}
   \> \| \atleastone{\meta{digit $10$}} . \arbno{\meta{digit $10$}} \arbno{\#} \meta{suffix}
   \> \| \atleastone{\meta{digit $10$}} \atleastone{\#} . \arbno{\#} \meta{suffix}
\meta{uinteger $R$} \: \atleastone{\meta{digit $R$}} \arbno{\#}
\meta{prefix $R$} \: %
         \meta{radix $R$} \meta{exactness}
   \> \| \meta{exactness} \meta{radix $R$}
\end{grammar}

\begin{grammar}%
\meta{suffix} \: \meta{empty} 
   \> \| \meta{exponent marker} \meta{sign} \atleastone{\meta{digit $10$}}
\meta{exponent marker} \: e \| s \| f \| d \| l
\meta{sign} \: \meta{empty}  \| + \|  -
\meta{exactness} \: \meta{empty} \| \#i\sharpindex{i} \| \#e\sharpindex{e}
\meta{radix 2} \: \#b\sharpindex{b}
\meta{radix 8} \: \#o\sharpindex{o}
\meta{radix 10} \: \meta{empty} \| \#d
\meta{radix 16} \: \#x\sharpindex{x}
\meta{digit 2} \: 0 \| 1
\meta{digit 8} \: 0 \| 1 \| 2 \| 3 \| 4 \| 5 \| 6 \| 7
\meta{digit 10} \: \meta{digit}
\meta{digit 16} \: \meta{digit $10$} \| a \| b \| c \| d \| e \| f %
\end{grammar}

\begin{grammar}%
\meta{datum} \: \meta{simple datum} \| \meta{compound datum}
\meta{simple datum} \: \meta{boolean} \| \meta{number}
\>  \| \meta{character} \| \meta{string} \|  \meta{symbol}
\meta{symbol} \: \meta{identifier}
\meta{compound datum} \: \meta{list} \| \meta{vector}
\meta{list} \: (\arbno{\meta{datum}}) \| (\atleastone{\meta{datum}} .\ \meta{datum})
\>    \| \meta{abbreviation}
\meta{abbreviation} \: \meta{abbrev prefix} \meta{datum}
\meta{abbrev prefix} \: ' \| ` \| , \| ,@
\meta{vector} \: \#(\arbno{\meta{datum}}) %
\end{grammar}

\begin{grammar}%
\meta{expression} \: \meta{variable}
\>  \| \meta{literal}
\>  \| \meta{procedure call}
\>  \| \meta{lambda expression}
\>  \| \meta{conditional}
\>  \| \meta{assignment}
\>  \| \meta{derived expression}
\>  \| \meta{macro use}
\>  \| \meta{macro block}

\meta{literal} \: \meta{quotation} \| \meta{self-evaluating}
\meta{self-evaluating} \: \meta{boolean} \| \meta{number}
\>  \| \meta{character} \| \meta{string}
\meta{quotation} \: '\meta{datum} \| (quote \meta{datum})
\meta{procedure call} \: (\meta{operator} \arbno{\meta{operand}})
\meta{operator} \: \meta{expression}
\meta{operand} \: \meta{expression}

\meta{lambda expression} \: (lambda \meta{formals} \meta{body})
\meta{formals} \: (\arbno{\meta{variable}}) \| \meta{variable}
\>  \| (\atleastone{\meta{variable}} .\ \meta{variable})
\meta{body} \: \arbno{\meta{definition}} \meta{sequence}
\meta{sequence} \: \arbno{\meta{command}} \meta{expression}
\meta{command} \: \meta{expression}

\meta{conditional} \: (if \meta{test} \meta{consequent} \meta{alternate})
\meta{test} \: \meta{expression}
\meta{consequent} \: \meta{expression}
\meta{alternate} \: \meta{expression} \| \meta{empty}

\meta{assignment} \: (set! \meta{variable} \meta{expression})

\meta{derived expression} \:
\>  \> (cond \atleastone{\meta{cond clause}})
\>  \| (cond \arbno{\meta{cond clause}} (else \meta{sequence}))
\>  \| (c\=ase \meta{expression}
\>       \>\atleastone{\meta{case clause}})
\>  \| (c\=ase \meta{expression}
\>       \>\arbno{\meta{case clause}}
\>       \>(else \meta{sequence}))
\>  \| (and \arbno{\meta{test}})
\>  \| (or \arbno{\meta{test}})
\>  \| (let (\arbno{\meta{binding spec}}) \meta{body})
\>  \| (let \meta{variable} (\arbno{\meta{binding spec}}) \meta{body})
\>  \| (let* (\arbno{\meta{binding spec}}) \meta{body})
\>  \| (letrec (\arbno{\meta{binding spec}}) \meta{body})
\>  \| (begin \meta{sequence})
\>  \| (d\=o \=(\arbno{\meta{iteration spec}})
\>       \>  \>(\meta{test} \meta{do result})
\>       \>\arbno{\meta{command}})
\>  \| (delay \meta{expression})
\>  \| \meta{quasiquotation}

\meta{cond clause} \: (\meta{test} \meta{sequence})
\>   \| (\meta{test})
\>   \| (\meta{test} => \meta{recipient})
\meta{recipient} \: \meta{expression}
\meta{case clause} \: ((\arbno{\meta{datum}}) \meta{sequence})
\meta{binding spec} \: (\meta{variable} \meta{expression})
\meta{iteration spec} \: (\meta{variable} \meta{init} \meta{step})
\> \| (\meta{variable} \meta{init})
\meta{init} \: \meta{expression}
\meta{step} \: \meta{expression}
\meta{do result} \: \meta{sequence} \| \meta{empty}

\meta{macro use} \: (\meta{keyword} \arbno{\meta{datum}})
\meta{keyword} \: \meta{identifier}

\meta{macro block} \:
\>  (let-syntax (\arbno{\meta{syntax spec}}) \meta{body})
\>  \| (letrec-syntax (\arbno{\meta{syntax spec}}) \meta{body})
\meta{syntax spec} \: (\meta{keyword} \meta{transformer spec})

\end{grammar}

\begin{grammar}%
\meta{quasiquotation} \: \meta{quasiquotation 1}
\meta{qq template 0} \: \meta{expression}
\meta{quasiquotation $D$} \: `\meta{qq template $D$}
\>    \| (quasiquote \meta{qq template $D$})
\meta{qq template $D$} \: \meta{simple datum}
\>    \| \meta{list qq template $D$}
\>    \| \meta{vector qq template $D$}
\>    \| \meta{unquotation $D$}
\meta{list qq template $D$} \: (\arbno{\meta{qq template or splice $D$}})
\>    \| (\atleastone{\meta{qq template or splice $D$}} .\ \meta{qq template $D$})
\>    \| '\meta{qq template $D$}
\>    \| \meta{quasiquotation $D+1$}
\meta{vector qq template $D$} \: \#(\arbno{\meta{qq template or splice $D$}})
\meta{unquotation $D$} \: ,\meta{qq template $D-1$}
\>    \| (unquote \meta{qq template $D-1$})
\meta{qq template or splice $D$} \: \meta{qq template $D$}
\>    \| \meta{splicing unquotation $D$}
\meta{splicing unquotation $D$} \: ,@\meta{qq template $D-1$}
\>    \| (unquote-splicing \meta{qq template $D-1$}) %
\end{grammar}

\begin{grammar}%
\meta{transformer spec} \:
\> (syntax-rules (\arbno{\meta{identifier}}) \arbno{\meta{syntax rule}})
\meta{syntax rule} \: (\meta{pattern} \meta{template})
\meta{pattern} \: \meta{pattern identifier}
\>  \| (\arbno{\meta{pattern}})
\>  \| (\atleastone{\meta{pattern}} . \meta{pattern})
\>  \| (\arbno{\meta{pattern}} \meta{pattern} \meta{ellipsis})
\>  \| \#(\arbno{\meta{pattern}})
\>  \| \#(\arbno{\meta{pattern}} \meta{pattern} \meta{ellipsis})
\>  \| \meta{pattern datum}
\meta{pattern datum} \: \meta{string}
\>  \| \meta{character}
\>  \| \meta{boolean}
\>  \| \meta{number}
\meta{template} \: \meta{pattern identifier}
\>  \| (\arbno{\meta{template element}})
\>  \| (\atleastone{\meta{template element}} . \meta{template})
\>  \| \#(\arbno{\meta{template element}})
\>  \| \meta{template datum}
\meta{template element} \: \meta{template}
\>  \| \meta{template} \meta{ellipsis}
\meta{template datum} \: \meta{pattern datum}
\meta{pattern identifier} \: \meta{any identifier except {\cf ...}}
\meta{ellipsis} \: \meta{the identifier {\cf ...}}
\end{grammar}

\begin{grammar}%
\meta{program} \: \arbno{\meta{command or definition}}
\meta{command or definition} \: \meta{command}
\> \| \meta{definition}
\> \| \meta{syntax definition}
\> \| (begin \atleastone{\meta{command or definition}})
\meta{definition} \: (define \meta{variable} \meta{expression})
\>   \| (define (\meta{variable} \meta{def formals}) \meta{body})
\>   \| (begin \arbno{\meta{definition}})
\meta{def formals} \: \arbno{\meta{variable}}
\>   \| \arbno{\meta{variable}} .\ \meta{variable}
\meta{syntax definition} \:
\>  (define-syntax \meta{keyword} \meta{transformer spec})
\end{grammar}